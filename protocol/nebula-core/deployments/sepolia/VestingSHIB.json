{
  "address": "0xCdEE06A091EB25A8B178d57e21f1E36c90F5F9B4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primordialPePeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestIndex",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestIndex",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "findTimeBracketIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllSlots",
      "outputs": [
        {
          "internalType": "bool[10]",
          "name": "",
          "type": "bool[10]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apr",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Vesting.Vest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllVests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apr",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Vesting.Vest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apr",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Vesting.Vest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintablePrimordialPePeToken",
      "outputs": [
        {
          "internalType": "contract IPrimordialPePe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primordialPePeToken",
          "type": "address"
        }
      ],
      "name": "setPrimordialPePeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingToken",
          "type": "address"
        }
      ],
      "name": "setVestingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timeBrackets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userVests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeIndex",
          "type": "uint256"
        }
      ],
      "name": "vestTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd49e762039208a4493445bef34a41392e753b6e638bec218128e5baf4381386",
  "receipt": {
    "to": null,
    "from": "0xA8eE3Bd4D9BeCD733F0D73bD6eBD0c83e08c7CA9",
    "contractAddress": "0xCdEE06A091EB25A8B178d57e21f1E36c90F5F9B4",
    "transactionIndex": 1,
    "gasUsed": "1599174",
    "logsBloom": "0x
    "blockHash": "0x97fd3efb28fd36df95cf346f15f7d1fe893761531cc199bce300b7b993b91ef7",
    "transactionHash": "0xbd49e762039208a4493445bef34a41392e753b6e638bec218128e5baf4381386",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5505291,
        "transactionHash": "0xbd49e762039208a4493445bef34a41392e753b6e638bec218128e5baf4381386",
        "address": "0xCdEE06A091EB25A8B178d57e21f1E36c90F5F9B4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8ee3bd4d9becd733f0d73bd6ebd0c83e08c7ca9"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x97fd3efb28fd36df95cf346f15f7d1fe893761531cc199bce300b7b993b91ef7"
      }
    ],
    "blockNumber": 5505291,
    "cumulativeGasUsed": "1641911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46cB0AfFA874719c7b273Df80954CC98199e2d69",
    "0xB6Ad6AD0364Eb5E8B109a55F01F4F68971B40E2B"
  ],
  "numDeployments": 1,
  "solcInputHash": "aa174bef04d09a81dbefaeeac5918fa6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primordialPePeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestIndex\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestIndex\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"findTimeBracketIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllSlots\",\"outputs\":[{\"internalType\":\"bool[10]\",\"name\":\"\",\"type\":\"bool[10]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.Vest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllVests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.Vest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.Vest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintablePrimordialPePeToken\",\"outputs\":[{\"internalType\":\"contract IPrimordialPePe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primordialPePeToken\",\"type\":\"address\"}],\"name\":\"setPrimordialPePeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingToken\",\"type\":\"address\"}],\"name\":\"setVestingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeBrackets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeIndex\",\"type\":\"uint256\"}],\"name\":\"vestTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPrimordialPePe {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\ncontract Vesting is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Vest {\\n        uint256 amount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 apr;\\n        bool active;\\n    }\\n\\n    IERC20 public vestingToken;\\n    IPrimordialPePe public mintablePrimordialPePeToken;\\n\\n    uint256[] public timeBrackets = [\\n        30 days,\\n        60 days,\\n        90 days,\\n        120 days,\\n        150 days,\\n        180 days,\\n        210 days,\\n        240 days,\\n        270 days,\\n        300 days,\\n        330 days,\\n        365 days\\n    ];\\n\\n    mapping(address => mapping(uint256 => Vest)) public userVests;\\n    mapping(address => uint256) public vestCount;\\n    mapping(address => bool[10]) private availableSlots;\\n\\n    constructor(address _vestingToken, address _primordialPePeToken) {\\n        vestingToken = IERC20(_vestingToken);\\n        mintablePrimordialPePeToken = IPrimordialPePe(_primordialPePeToken);\\n    }\\n\\n    function vestTokens(uint256 _amount, uint256 _timeIndex) external {\\n        uint256 currentCount = vestCount[msg.sender];\\n        require(currentCount < 10, \\\"Max vesting positions reached\\\");\\n        require(_timeIndex < timeBrackets.length, \\\"Invalid time bracket\\\");\\n        uint256 slot = findAvailableSlot(msg.sender);\\n        vestingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 apr = 2 + _timeIndex;\\n        uint256 endTime = block.timestamp + timeBrackets[_timeIndex];\\n        userVests[msg.sender][slot] = Vest(_amount, block.timestamp, endTime, apr, true);\\n        availableSlots[msg.sender][slot] = false;\\n        if (slot == vestCount[msg.sender]) {\\n            vestCount[msg.sender]++;\\n        }\\n    }\\n\\n    function findAvailableSlot(address user) private view returns (uint256) {\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (availableSlots[user][i]) {\\n                return i;\\n            }\\n        }\\n        return vestCount[user];\\n    }\\n\\n    function claimRewards(uint256 _vestIndex) external {\\n        require(_vestIndex < vestCount[msg.sender], \\\"Invalid vest index\\\");\\n        Vest storage vest = userVests[msg.sender][_vestIndex];\\n        require(vest.active, \\\"Vest not active or already claimed\\\");\\n        require(block.timestamp >= vest.endTime, \\\"Vesting period not yet completed\\\");\\n\\n        uint256 timeBracketIndex = findTimeBracketIndex(vest.endTime - vest.startTime);\\n        require(timeBracketIndex < timeBrackets.length, \\\"Time bracket not found\\\");\\n\\n        uint256 dailyAPR = (vest.apr * 1e18) / 36500;\\n        uint256 daysVested = (vest.endTime - vest.startTime) / 1 days;\\n        uint256 reward = (vest.amount * dailyAPR / 1e18) * daysVested;\\n\\n        mintablePrimordialPePeToken.mint(msg.sender, reward);\\n        vestingToken.safeTransfer(msg.sender, vest.amount);\\n        vest.active = false;\\n        availableSlots[msg.sender][_vestIndex] = true;\\n    }\\n\\n    function emergencyWithdraw(uint256 _vestIndex) external {\\n        require(_vestIndex < vestCount[msg.sender], \\\"Invalid vest index\\\");\\n        Vest storage vest = userVests[msg.sender][_vestIndex];\\n        require(vest.active, \\\"Vest not active or already claimed\\\");\\n\\n        vestingToken.safeTransfer(msg.sender, vest.amount);\\n        vest.active = false;\\n        availableSlots[msg.sender][_vestIndex] = true;\\n    }\\n\\n    function setVestingToken(address _vestingToken) external onlyOwner {\\n        vestingToken = IERC20(_vestingToken);\\n    }\\n\\n    function setPrimordialPePeToken(address _primordialPePeToken) external onlyOwner {\\n        mintablePrimordialPePeToken = IPrimordialPePe(_primordialPePeToken);\\n    }\\n\\n    function getVestCount(address user) external view returns (uint256) {\\n        return vestCount[user];\\n    }\\n\\n    function getVest(address user, uint256 index) external view returns (Vest memory) {\\n        require(index < vestCount[user], \\\"Invalid vest index\\\");\\n        return userVests[user][index];\\n    }\\n\\n    function getAllVests(address user) external view returns (Vest[] memory) {\\n        uint256 count = vestCount[user];\\n        Vest[] memory vests = new Vest[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            vests[i] = userVests[user][i];\\n        }\\n        return vests;\\n    }\\n\\n    function getAllSlots(address user) external view returns (bool[10] memory, Vest[] memory) {\\n        bool[10] memory slotsAvailability = availableSlots[user];\\n        Vest[] memory vests = new Vest[](10);\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (!slotsAvailability[i]) {\\n                vests[i] = userVests[user][i];\\n            }\\n        }\\n        return (slotsAvailability, vests);\\n    }\\n\\n    function findTimeBracketIndex(uint256 duration) public view returns (uint256) {\\n        for (uint256 i = 0; i < timeBrackets.length; i++) {\\n            if (duration <= timeBrackets[i]) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Duration does not fit any time bracket\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9e4fb89b390b99c29d3d6e17ed3116f7fb13077c15de776c5e9efa2fb3869aa0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200021d57620017af906001600160401b03601f38849003908101601f1916830190828211848310176200022257808491604096879485528339810103126200021d57620000508262000238565b6200005f602080940162000238565b60008054336001600160a01b031980831682178455966001600160a01b039694959493909290919087167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a38751926101808401908111848210176200020957885262278d008352624f1a0060208401526276a70088840152629e3400606084015262c5c100608084015262ed4e0060a0840152630114db0060c084015263013c680060e0840152630163f50061010084015263018b82006101208401526301b30f006101408401526301e1338061016084015260035492600c93600c60035580600c10620001a6575b5090869493926003825260208220915b8481106200018a57505050505016836001541617600155169060025416176002555161156190816200024e8239f35b835163ffffffff1681840155889650928101926001016200015b565b600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b017fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f8675b818110620001fd57506200014b565b838155600101620001ee565b634e487b7160e01b82526041600452602482fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200021d5756fe6040608081526004908136101561001557600080fd5b6000803560e01c80630962ef7914610c0e57806319d152fa14610bd95780631dbc04ae14610b7557806348f5eaf914610af857806351706aa114610abf5780635312ea8e14610a175780635a4665c3146109b3578063659446fc146108a6578063715018a61461082757806379d4de18146105c55780638da5cb5b14610592578063a2f4a3ff1461055d578063a73214ed14610336578063af8033c31461025c578063e842698b14610214578063f113450214610214578063f2fde38b1461010e5763fdafcec3146100e657600080fd5b3461010b57602060031936011261010b575061010460209235611107565b9051908152f35b80fd5b50913461021057602060031936011261021057610129610e53565b9061013261120a565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101a7575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509034610258576020600319360112610258578060209273ffffffffffffffffffffffffffffffffffffffff610248610e53565b1681526005845220549051908152f35b5080fd5b509190346102105780600319360112610210578060ff6103349260a095610281610e53565b73ffffffffffffffffffffffffffffffffffffffff602435916102a26110c8565b501680835260056020526102ba848420548310610f33565b82528660205282822090825260205220938251946102d786611025565b80548652600181015460208701526002810154848701526003810154606087015201541615156080840152518092608080918051845260208101516020850152604081015160408501526060810151606085015201511515910152565bf35b509034610258576020928360031936011261021057610353610e53565b73ffffffffffffffffffffffffffffffffffffffff83519161037483611057565b610140809336903716928385526006865280852095815196549160ff9586841615158952868460081c161515838a0152868460101c161515828a0152606093878160181c16151560608b0152876080918181871c16151560808d0152818160281c16151560a08d0152818160301c16151560c08d0152818160381c16151560e08d01528181861c1615156101008d015260481c1615156101208b01526104198a611057565b82519761016097888a018a811067ffffffffffffffff82111761054857859c9b9c52600a96600a8b5260005b89811061052b57508c5b888110610499575050505050505195869097905b83821061048257878061047e8989808a850152830190610ec8565b0390f35b82806001928b511515815201990191019097610463565b808e8e9f9e928e8b88888d8d6001998760051b0151156104c5575b5050505050505050019c9b9c61044f565b87829161051d9952838652818120888252865220908051946104e686611025565b825486528a8301549086015260028201549085015260038101548a85015201541615158a82015261051783836110f3565b526110f3565b508d818e8b88888d8d6104b4565b808c9d9e9d89809361053b6110c8565b92010152019c9b9c610445565b604182634e487b7160e01b6000525260246000fd5b50903461025857816003193601126102585760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b50903461025857816003193601126102585773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b50919034610210578060031936011261021057813590602490813533865260209060058252600a8388205410156107e6576003548110156107a5576106093361126f565b9461067173ffffffffffffffffffffffffffffffffffffffff600154168551907f23b872dd000000000000000000000000000000000000000000000000000000008683015233888301523060448301528360648301526064825261066c82611025565b6112ea565b8160020191826002116107935761068790610e7b565b90549060031b1c42019182421161077f57600593929188918651916106ab83611025565b82528482019342855287830190815260608301918252608083019460018652338d528487528c8b8a822091528752888d2093518455516001840155516002830155516003820155019051151560ff60ff1983541691161790553387526006815261071785848920611097565b60ff82549160031b1b19169055338752528420928354809314610738578480f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831461076e5750506001019055388080808480f35b60118591634e487b7160e01b835252fd5b85601189634e487b7160e01b600052526000fd5b858960118a634e487b7160e01b835252fd5b6064866014868587519362461bcd60e51b85528401528201527f496e76616c69642074696d6520627261636b65740000000000000000000000006044820152fd5b606486601d868587519362461bcd60e51b85528401528201527f4d61782076657374696e6720706f736974696f6e7320726561636865640000006044820152fd5b503461010b578060031936011261010b5761084061120a565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610258576020918260031936011261010b5773ffffffffffffffffffffffffffffffffffffffff6108d8610e53565b16938482526005845282822054916108ef836110b0565b956108fc85519788611074565b838752601f1961090b856110b0565b018660005b82811061099d57505050815b8481106109355785518781528061047e818a018b610ec8565b600190828452848852868420818552885286842060ff8689519261095884611025565b80548452858101548c85015260028101548b850152600381015460608501520154161515608082015261098b828b6110f3565b52610996818a6110f3565b500161091c565b6109a56110c8565b82828c010152018790610910565b503461010b57602060031936011261010b5773ffffffffffffffffffffffffffffffffffffffff6109e2610e53565b6109ea61120a565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b50913461021057602060031936011261021057610aa8918135913385526005602052610a47828620548410610f33565b33855280602052818520838652602052610a9182862091820191610a6e60ff845416610f7e565b73ffffffffffffffffffffffffffffffffffffffff6001541690549033906111a6565b60ff19815416905533845260066020528320611097565b81549060031b9060ff6001831b921b191617905580f35b50913461021057602060031936011261021057359160035483101561010b5750610aea602092610e7b565b90549060031b1c9051908152f35b509190346102105780600319360112610210578060a09373ffffffffffffffffffffffffffffffffffffffff610b2c610e53565b1681528360205281812060243582526020522080549260018201549260ff6002840154926003850154940154169381519586526020860152840152606083015215156080820152f35b503461010b57602060031936011261010b5773ffffffffffffffffffffffffffffffffffffffff610ba4610e53565b610bac61120a565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015580f35b50903461025857816003193601126102585760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b50903461025857602090816003193601126102105783359133845260058152610c3b828520548410610f33565b338452848152818420838552815281842085810190610c5d60ff835416610f7e565b6002810154804210610e1257600182015490610c81610c7c8383610fef565b611107565b6003541115610dd057600383015491670de0b6b3a76400009182840293808504841490151715610dbd57618e9462015180610cc4610cd4969594610cce94610fef565b0493048554611012565b04611012565b9673ffffffffffffffffffffffffffffffffffffffff97886002541690813b15610db95786517f40c10f1900000000000000000000000000000000000000000000000000000000815233848201908152602081019290925291899183919082908490829060400103925af18015610daf57610d7a575b505090610d6760069392610aa897986001541690549033906111a6565b60ff198154169055338652528320611097565b67ffffffffffffffff819998929911610d9c578552959650610d676006610d4a565b60248260418b634e487b7160e01b835252fd5b86513d8a823e3d90fd5b8880fd5b60248a60118d634e487b7160e01b835252fd5b6064898688519162461bcd60e51b8352820152601660248201527f54696d6520627261636b6574206e6f7420666f756e64000000000000000000006044820152fd5b606488858088519262461bcd60e51b845283015260248201527f56657374696e6720706572696f64206e6f742079657420636f6d706c657465646044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610e7657565b600080fd5b600354811015610eb25760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110610ee8575050505090565b909192938260a082610f276001948951608080918051845260208101516020850152604081015160408501526060810151606085015201511515910152565b01950193929101610eda565b15610f3a57565b606460405162461bcd60e51b815260206004820152601260248201527f496e76616c6964207665737420696e64657800000000000000000000000000006044820152fd5b15610f8557565b608460405162461bcd60e51b815260206004820152602260248201527f56657374206e6f7420616374697665206f7220616c726561647920636c61696d60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b91908203918211610ffc57565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610ffc57565b60a0810190811067ffffffffffffffff82111761104157604052565b634e487b7160e01b600052604160045260246000fd5b610140810190811067ffffffffffffffff82111761104157604052565b90601f601f19910116810190811067ffffffffffffffff82111761104157604052565b919091600a831015610eb257601f908360051c01921690565b67ffffffffffffffff81116110415760051b60200190565b604051906110d582611025565b60006080838281528260208201528260408201528260608201520152565b8051821015610eb25760209160051b010190565b60009060038054925b83811061118157608460405162461bcd60e51b815260206004820152602660248201527f4475726174696f6e20646f6573206e6f742066697420616e792074696d65206260448201527f7261636b657400000000000000000000000000000000000000000000000000006064820152fd5b61118a81610e7b565b905490831b1c83111561119f57600101611110565b9250505090565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9290921660248301526044808301939093529181526112089161066c606483611074565b565b73ffffffffffffffffffffffffffffffffffffffff60005416330361122b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60005b600a81106112a2575073ffffffffffffffffffffffffffffffffffffffff16600052600560205260406000205490565b73ffffffffffffffffffffffffffffffffffffffff8216600052600660205260ff6112d1826040600020611097565b90549060031b1c166112e557600101611272565b905090565b73ffffffffffffffffffffffffffffffffffffffff16906040516040810167ffffffffffffffff9082811082821117611041576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d15611450573d92831161143c57906113939392916040519261138688601f19601f8401160185611074565b83523d868885013e61145b565b805191821591848315611418575b5050509050156113ae5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126102585782015190811515820361010b5750803880846113a1565b602485634e487b7160e01b81526041600452fd5b906113939392506060915b919290156114bc575081511561146f575090565b3b156114785790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156114cf5750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061151457505050601f19601f836000604480968601015201168101030190fd5b8181018301518682016044015285935082016114f156fea264697066735822122030cbebd6184f602f4e870697f01f583cf282b43298ae3ab7b367d7f9ad32077064736f6c63430008180033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b6000803560e01c80630962ef7914610c0e57806319d152fa14610bd95780631dbc04ae14610b7557806348f5eaf914610af857806351706aa114610abf5780635312ea8e14610a175780635a4665c3146109b3578063659446fc146108a6578063715018a61461082757806379d4de18146105c55780638da5cb5b14610592578063a2f4a3ff1461055d578063a73214ed14610336578063af8033c31461025c578063e842698b14610214578063f113450214610214578063f2fde38b1461010e5763fdafcec3146100e657600080fd5b3461010b57602060031936011261010b575061010460209235611107565b9051908152f35b80fd5b50913461021057602060031936011261021057610129610e53565b9061013261120a565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101a7575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509034610258576020600319360112610258578060209273ffffffffffffffffffffffffffffffffffffffff610248610e53565b1681526005845220549051908152f35b5080fd5b509190346102105780600319360112610210578060ff6103349260a095610281610e53565b73ffffffffffffffffffffffffffffffffffffffff602435916102a26110c8565b501680835260056020526102ba848420548310610f33565b82528660205282822090825260205220938251946102d786611025565b80548652600181015460208701526002810154848701526003810154606087015201541615156080840152518092608080918051845260208101516020850152604081015160408501526060810151606085015201511515910152565bf35b509034610258576020928360031936011261021057610353610e53565b73ffffffffffffffffffffffffffffffffffffffff83519161037483611057565b610140809336903716928385526006865280852095815196549160ff9586841615158952868460081c161515838a0152868460101c161515828a0152606093878160181c16151560608b0152876080918181871c16151560808d0152818160281c16151560a08d0152818160301c16151560c08d0152818160381c16151560e08d01528181861c1615156101008d015260481c1615156101208b01526104198a611057565b82519761016097888a018a811067ffffffffffffffff82111761054857859c9b9c52600a96600a8b5260005b89811061052b57508c5b888110610499575050505050505195869097905b83821061048257878061047e8989808a850152830190610ec8565b0390f35b82806001928b511515815201990191019097610463565b808e8e9f9e928e8b88888d8d6001998760051b0151156104c5575b5050505050505050019c9b9c61044f565b87829161051d9952838652818120888252865220908051946104e686611025565b825486528a8301549086015260028201549085015260038101548a85015201541615158a82015261051783836110f3565b526110f3565b508d818e8b88888d8d6104b4565b808c9d9e9d89809361053b6110c8565b92010152019c9b9c610445565b604182634e487b7160e01b6000525260246000fd5b50903461025857816003193601126102585760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b50903461025857816003193601126102585773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b50919034610210578060031936011261021057813590602490813533865260209060058252600a8388205410156107e6576003548110156107a5576106093361126f565b9461067173ffffffffffffffffffffffffffffffffffffffff600154168551907f23b872dd000000000000000000000000000000000000000000000000000000008683015233888301523060448301528360648301526064825261066c82611025565b6112ea565b8160020191826002116107935761068790610e7b565b90549060031b1c42019182421161077f57600593929188918651916106ab83611025565b82528482019342855287830190815260608301918252608083019460018652338d528487528c8b8a822091528752888d2093518455516001840155516002830155516003820155019051151560ff60ff1983541691161790553387526006815261071785848920611097565b60ff82549160031b1b19169055338752528420928354809314610738578480f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831461076e5750506001019055388080808480f35b60118591634e487b7160e01b835252fd5b85601189634e487b7160e01b600052526000fd5b858960118a634e487b7160e01b835252fd5b6064866014868587519362461bcd60e51b85528401528201527f496e76616c69642074696d6520627261636b65740000000000000000000000006044820152fd5b606486601d868587519362461bcd60e51b85528401528201527f4d61782076657374696e6720706f736974696f6e7320726561636865640000006044820152fd5b503461010b578060031936011261010b5761084061120a565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610258576020918260031936011261010b5773ffffffffffffffffffffffffffffffffffffffff6108d8610e53565b16938482526005845282822054916108ef836110b0565b956108fc85519788611074565b838752601f1961090b856110b0565b018660005b82811061099d57505050815b8481106109355785518781528061047e818a018b610ec8565b600190828452848852868420818552885286842060ff8689519261095884611025565b80548452858101548c85015260028101548b850152600381015460608501520154161515608082015261098b828b6110f3565b52610996818a6110f3565b500161091c565b6109a56110c8565b82828c010152018790610910565b503461010b57602060031936011261010b5773ffffffffffffffffffffffffffffffffffffffff6109e2610e53565b6109ea61120a565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b50913461021057602060031936011261021057610aa8918135913385526005602052610a47828620548410610f33565b33855280602052818520838652602052610a9182862091820191610a6e60ff845416610f7e565b73ffffffffffffffffffffffffffffffffffffffff6001541690549033906111a6565b60ff19815416905533845260066020528320611097565b81549060031b9060ff6001831b921b191617905580f35b50913461021057602060031936011261021057359160035483101561010b5750610aea602092610e7b565b90549060031b1c9051908152f35b509190346102105780600319360112610210578060a09373ffffffffffffffffffffffffffffffffffffffff610b2c610e53565b1681528360205281812060243582526020522080549260018201549260ff6002840154926003850154940154169381519586526020860152840152606083015215156080820152f35b503461010b57602060031936011261010b5773ffffffffffffffffffffffffffffffffffffffff610ba4610e53565b610bac61120a565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015580f35b50903461025857816003193601126102585760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b50903461025857602090816003193601126102105783359133845260058152610c3b828520548410610f33565b338452848152818420838552815281842085810190610c5d60ff835416610f7e565b6002810154804210610e1257600182015490610c81610c7c8383610fef565b611107565b6003541115610dd057600383015491670de0b6b3a76400009182840293808504841490151715610dbd57618e9462015180610cc4610cd4969594610cce94610fef565b0493048554611012565b04611012565b9673ffffffffffffffffffffffffffffffffffffffff97886002541690813b15610db95786517f40c10f1900000000000000000000000000000000000000000000000000000000815233848201908152602081019290925291899183919082908490829060400103925af18015610daf57610d7a575b505090610d6760069392610aa897986001541690549033906111a6565b60ff198154169055338652528320611097565b67ffffffffffffffff819998929911610d9c578552959650610d676006610d4a565b60248260418b634e487b7160e01b835252fd5b86513d8a823e3d90fd5b8880fd5b60248a60118d634e487b7160e01b835252fd5b6064898688519162461bcd60e51b8352820152601660248201527f54696d6520627261636b6574206e6f7420666f756e64000000000000000000006044820152fd5b606488858088519262461bcd60e51b845283015260248201527f56657374696e6720706572696f64206e6f742079657420636f6d706c657465646044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610e7657565b600080fd5b600354811015610eb25760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110610ee8575050505090565b909192938260a082610f276001948951608080918051845260208101516020850152604081015160408501526060810151606085015201511515910152565b01950193929101610eda565b15610f3a57565b606460405162461bcd60e51b815260206004820152601260248201527f496e76616c6964207665737420696e64657800000000000000000000000000006044820152fd5b15610f8557565b608460405162461bcd60e51b815260206004820152602260248201527f56657374206e6f7420616374697665206f7220616c726561647920636c61696d60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b91908203918211610ffc57565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610ffc57565b60a0810190811067ffffffffffffffff82111761104157604052565b634e487b7160e01b600052604160045260246000fd5b610140810190811067ffffffffffffffff82111761104157604052565b90601f601f19910116810190811067ffffffffffffffff82111761104157604052565b919091600a831015610eb257601f908360051c01921690565b67ffffffffffffffff81116110415760051b60200190565b604051906110d582611025565b60006080838281528260208201528260408201528260608201520152565b8051821015610eb25760209160051b010190565b60009060038054925b83811061118157608460405162461bcd60e51b815260206004820152602660248201527f4475726174696f6e20646f6573206e6f742066697420616e792074696d65206260448201527f7261636b657400000000000000000000000000000000000000000000000000006064820152fd5b61118a81610e7b565b905490831b1c83111561119f57600101611110565b9250505090565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9290921660248301526044808301939093529181526112089161066c606483611074565b565b73ffffffffffffffffffffffffffffffffffffffff60005416330361122b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60005b600a81106112a2575073ffffffffffffffffffffffffffffffffffffffff16600052600560205260406000205490565b73ffffffffffffffffffffffffffffffffffffffff8216600052600660205260ff6112d1826040600020611097565b90549060031b1c166112e557600101611272565b905090565b73ffffffffffffffffffffffffffffffffffffffff16906040516040810167ffffffffffffffff9082811082821117611041576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d15611450573d92831161143c57906113939392916040519261138688601f19601f8401160185611074565b83523d868885013e61145b565b805191821591848315611418575b5050509050156113ae5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126102585782015190811515820361010b5750803880846113a1565b602485634e487b7160e01b81526041600452fd5b906113939392506060915b919290156114bc575081511561146f575090565b3b156114785790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156114cf5750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061151457505050601f19601f836000604480968601015201168101030190fd5b8181018301518682016044015285935082016114f156fea264697066735822122030cbebd6184f602f4e870697f01f583cf282b43298ae3ab7b367d7f9ad32077064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 995,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "vestingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 998,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "mintablePrimordialPePeToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPrimordialPePe)975"
      },
      {
        "astId": 1014,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "timeBrackets",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1021,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "userVests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vest)992_storage))"
      },
      {
        "astId": 1025,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "vestCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1031,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "availableSlots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_bool)10_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPrimordialPePe)975": {
        "encoding": "inplace",
        "label": "contract IPrimordialPePe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bool)10_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool[10])",
        "numberOfBytes": "32",
        "value": "t_array(t_bool)10_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vest)992_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Vesting.Vest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vest)992_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Vest)992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vesting.Vest)",
        "numberOfBytes": "32",
        "value": "t_struct(Vest)992_storage"
      },
      "t_struct(Vest)992_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.Vest",
        "members": [
          {
            "astId": 983,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 985,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 987,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "apr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 991,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "active",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}